给你一棵 完全二叉树 的根节点 root ，求出该树的节点个数。

完全二叉树 的定义如下：在完全二叉树中，除了最底层节点可能没填满外，其余每层节点数都达到最大值，并且最下面一层的节点都集中在该层最左边的若干位置。若最底层为第 h 层（从第 0 层开始），则该层包含 1~ 2h 个节点。

Given the root of a complete binary tree, return the number of the nodes in the tree.

According to Wikipedia, every level, except possibly the last, is completely filled in a complete binary tree, and all nodes in the last level are as far left as possible. It can have between 1 and 2h nodes inclusive at the last level h.

Design an algorithm that runs in less than O(n) time complexity.

class Solution {
    public int countNodes(TreeNode root) {
        if(root == null) return 0;
        int leftDepth = getDepth(root.left);
        int rightDepth = getDepth(root.right);
        if(leftDepth == rightDepth) {
            int leftNode = (1 << leftDepth) - 1;
            int rightNode = countNodes(root.right);
            return leftNode + rightNode + 1;
        }else {
            int rightNode = (1 << rightDepth) -1;
            int leftNode = countNodes(root.left);
            return leftNode + rightNode + 1;
        }
    }
    private int getDepth(TreeNode curNode){
        int depth = 0;
        while (curNode != null){
            curNode = curNode.left;
            depth ++;
        }
        return depth;
    }
}