给定一个数组 prices ，它的第 i 个元素 prices[i] 表示一支给定股票第 i 天的价格。

你只能选择 某一天 买入这只股票，并选择在 未来的某一个不同的日子 卖出该股票。设计一个算法来计算你所能获取的最大利润。

返回你可以从这笔交易中获取的最大利润。如果你不能获取任何利润，返回 0 。
You are given an array prices where prices[i] is the price of a given stock on the ith day.

You want to maximize your profit by choosing a single day to buy one stock and choosing a different day in the future to sell that stock.

Return the maximum profit you can achieve from this transaction. If you cannot achieve any profit, return 0.

class Solution {
    public int maxProfit(int[] prices) {
        int length = prices.length;
        int[][][] dp = new int[length][2][2];
        dp[0][0][0]=0;
        dp[0][1][0]=0;
        dp[0][1][1]= -prices[0];
        for(int i=1; i< length; i++){
            dp[i][1][0]=Math.max(dp[i-1][1][0], dp[i-1][1][1] + prices[i]);
            dp[i][1][1]=Math.max(dp[i-1][1][1], dp[i-1][0][0]-prices[i]);
        }
        return dp[length-1][1][0];
    }
}